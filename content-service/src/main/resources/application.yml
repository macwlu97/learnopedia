spring:
  application:
    name: content-service

#  profiles:
#    active: ${SPRING_PROFILES_ACTIVE}  # Określenie, który profil ma być aktywny

  cloud:
    config:
      import-check:
        enabled: false
#    discovery:
#      enabled: true
#    config:
#      uri: ${CONFIG_SERVER_URL}

  config:
    import-check:
      enabled: false
#    import: configserver:${CONFIG_SERVER_URL}

  datasource:
    primary:
      url: jdbc:postgresql://localhost:5432/learnopedia
      username: maciejwnuklipinski
      password: pswd
      hikari:
        maximum-pool-size: 10

#    secondary:
#      url: jdbc:postgresql://localhost:5432/learnopedia_logs
#      username: ww
#      password: pswd
#      hikari:
#        maximum-pool-size: 5

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true

eureka:
  client:
    register-with-eureka: false
    fetch-registry: false

server:
  port: 8081  # Port, na którym będzie nasłuchiwać Service1

management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics  # Umożliwia dostęp do tych endpointów
      base-path: /actuator  # Domyślny path dla Actuatora (np. /actuator/health)
  endpoint:
    health:
      show-details: always  # Ustawienie, aby zawsze pokazywał szczegóły stanu zdrowia aplikacji
    metrics:
      enabled: true  # Włącza metryki aplikacji
